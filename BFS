import collections
import sys
from Queue import PriorityQueue

class Graph:

    def __init__(self, V):
        self.V = V
        self.adj = [[] for x in range(V)]
        self.edgeWeight = [[] for x in range(V)]

    def addEdge(self, v, w):
        self.adj[v].append(w) # Add w to vs list.
        self.edgeWeight[v].append(1)

    def BFS(self, s):
        q = collections.deque()
        visited = [False] * self.V
        dist = [0] * self.V
        q.append(s)
        visited[s] = True
        while q:
            u = q.popleft()
            print "%d is visited" % u
            for  v in  self.adj[u]: #for every node along with edge.
                if not visited[v]: #if not visited before
                    visited[v]= True
                    dist[v] = dist[u] + 1
                    q.append(v)
        #print dist
    def isConnected (self, start, end):
        q = collections.deque()
        visited = [False] * self.V

        visited[start] = True
        q.append(start)
        while q:
            u = q.popleft()
            for v in self.adj[u]:
                if not visited[v]:
                    if v == end:
                        return True;
                    else:
                        visited[v] = True
                        q.append(v)

        return False;

    def dijkstra(self, s):
        visited = [False] * self.V
        dist =  zip([sys.maxint]* self.V,range(self.V))
        tp = 0,s
        dist[s]  = tp
         visited[s] = True
        q = PriorityQueue()
        q.put(dist[s])
        k = 0
        while not q.empty():
            k += 1
            u = q.get() #vertex in Q with smallest distance
            # print q.empty()
            # print "currently the head is %d" %u[1]
            n = len(self.adj[u[1]])
            # print "no of neighbers of %d is %d" % (u[1], n)
            for i in range(n):
  
                v = self.adj[u[1]][i]
                alt = u[0] + self.dist_between(u[1], i)
                if alt < dist[v][0] and not visited[v] :
                    visited[v] = True
                    new_tuple = alt,v
                    dist[v]  = new_tuple # keep the shortest dist from src
                    q.put(dist[v]) #  Add unvisited v into the Q
  
        print dist
    def dist_between(self, u, i):
        # print "distance between %d and %d" %(u, self.adj[u][i])
        return self.edgeWeight[u][i]
    def isBipartite (self, s):
        visited = [False] * self.V
        partition = [0] * self.V
  
        q = collections.deque()
        visited[s] = True
        partition[s] = 1
        q.append(s)
        while q:
            u = q.popleft()
            for  v in self.adj[u]:
                if partition[u] == partition[v]:
                    return False
                elif not visited[v]:
                    visited[v] = True
                    partition[v] = 3 - partition[u]
                    q.append(v)
  
        return True;

def main():
    # Create a graph given in the above diagram
    g = Graph(4)
    #g.addEdge(0, 1)
    g.addEdge(0, 2)
    g.addEdge(1, 2)
    g.addEdge(2, 0)
    #g.addEdge(2, 3)
    #g.addEdge(3, 3)
    g.addEdge(1, 3)
    print "=======BFS======="
    g.BFS(2)
    print g.isConnected(1,3)
    print g.isConnected(3,1)
    g.dijkstra(2)
    print g.isBipartite(2)
if __name__ == "__main__":
  main()

