import sys
from Queue import PriorityQueue

class Graph:
    def __init__(self, V):
        self.V = V
        self.adj = [[] for x in range(V)]
        self.edgeWeight = [[] for x in range(V)]

    def addEdge(self, v, w):
        self.adj[v].append(w) # Add w to vs list.
        self.edgeWeight[v].append(1)

    def isCyclicUtil(self, v, visited, recStack):
        if visited[v] == False:
        # Mark the current node as visited and part of recursion stack
            visited[v] = True;
            recStack[v] = True;

        # Recur for all the vertices adjacent to this vertex
        n = len(self.adj[v])
        for i in range(n):
            w = self.adj[v][i]
            if not visited[w] and self.isCyclicUtil(w, visited, recStack):
                return True
            elif recStack[i]:
                return True

        recStack[v] = False # remove the vertex from recursion stack
        return False


        # Returns true if the graph contains a cycle, else false.
        # variation of DFS() in http://www.geeksforgeeks.org/archives/18212
    def isCyclic(self):
        # Mark all the vertices as not visited and not part of recursion
        visited = [False] * self.V
        recStack = [False] * self.V

        # Call the recursive helper function to detect cycle in different
        # DFS trees
        for i in range(self.V):
            if self.isCyclicUtil(i, visited, recStack):
                return True

        return False
    def DFS(self, v):
        # Mark all the vertices as not visited
        visited = [False] * self.V
        # Call the recursive helper function to print DFS traversal
        self.DFSUtil(v, visited)

    def DFSUtil(self, v, visited):
        visited[v] = True
        print "%d is visited" % v
        n = len(self.adj[v])
        for i in range(n):
            if not visited[self.adj[v][i]]:
                self.DFSUtil(self.adj[v][i], visited)

def main():
    # Create a graph given in the above diagram
    g = Graph(4)
    g.addEdge(0, 1)
    g.addEdge(0, 2)
    g.addEdge(1, 2)
    g.addEdge(2, 0)
    g.addEdge(2, 3)
    g.addEdge(3, 3)
    g.addEdge(1, 3)
    print "=======DFS======="
    g.DFS(2)
    if g.isCyclic():
        print "Graph contains cycle"
    else:
        print "Graph doesn't contain cycle"
if __name__ == "__main__":
  main()

